full_peptide<-NULL
for(f in files_part[grep("\\.peptide\\.txt", files_part)]){
print(paste(dir, f, sep="/"))
test1<-scan(paste(dir, f, sep="/"), "character", sep="\n", skip=1)
test1<-gsub(" <= WB", "", test1)
ss1<-grep(" Pos ", test1)+2
ee1<-grep("Protein", test1)-2
num1<-sapply(gsub("[ ]+","\t",test1[ss1]), function(x) strsplit(x, "\t")[[1]][12])
if(length(grep("cannot be found in hla_pseudo list", test1))>0) next
if(length(grep("Could not find allele", test1))>0) next
for(h1 in 1:length(num1)){
if(ss1[h1] == ee1[h1]){
d1<-t(strsplit(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), "\t")[[1]][c(3,2,12,11,4,14,15)])
d1<-t(d1[sapply(d1[,5], function(x) length(grep(x, info[match(num1[h1], info[,2]), 15]))==0),])
} else {
d1<-t(sapply(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), function(x) strsplit(x, "\t")[[1]][c(3,2,12,11,4,14,15)]))
d1<-d1[sapply(d1[,5], function(x) length(grep(x, info[match(num1[h1], info[,2]), 15]))==0),]
}
if(nrow(d1)==0) {
r_can<-match(num1[h1], info[,2])
if(is.na(r_can)){r_can<-grep(num1[h1], info[,2])}
remove<-c(remove, r_can)
next
}
full_peptide<-rbind(full_peptide, d1)
}
}
if(is.null(full_peptide)) return(NULL)
if(nrow(full_peptide)==0) return(NULL)
#Bind Full Peptide and info
tag<-c("HLA", "Pos", "Gene", "Evaluated_Mutant_Peptide_Core", "Evaluated_Mutant_Peptide", "Mut_IC50", "Mut_Rank",
"Chr", "NM_ID", "Change", "Ref", "Alt", "Prob", "Mutation_Prob.", "Exon_Start", "Exon_End",
"Mutation_Position", "Total_Depth", "Tumor_Depth", "Wt_Peptide",
"Mutant_Peptide", "Total_RNA", "Tumor_RNA_Ratio", "Tumor_RNA",
"Tumor_RNA_based_on_DNA", "MutRatio", "MutRatio_Min", "MutRatio_Max")
colnames(full_peptide)<-tag[1:ncol(full_peptide)]
if(nrow(full_peptide)==1){
full_peptide<-cbind(full_peptide, t(info[match(substr(full_peptide[,3], 1, 10), substr(info[,2], 1, 10)),]))
} else {
full_peptide<-cbind(full_peptide, info[match(substr(full_peptide[,3], 1, 10), substr(info[,2], 1, 10)),])
}
full_peptide<-full_peptide[,match(tag, colnames(full_peptide))]
write.table(full_peptide, paste(dir, "/", file_prefix, ".CLASS1.ALL.txt", sep=""),
row.names=FALSE, col.names=TRUE, quote=FALSE, sep="\t")
dir<-paste(hmdir, input_dir, sep="/")
files<-list.files(paste(dir, sep="/"))
files_part<-files[intersect(grep("HLACLASS2", files), grep(input_file_prefix, files))]
if(length(files_part)==0){
print("No File Detected!!")
return(NULL)
}
info<-t(sapply(scan(paste(annotation_file, sep="/"), "character", sep="\n"), function(x) strsplit(x, "\t")[[1]]))
cinfo<-c("", "Gene_ID", "Chr", "NM_ID", "Change", "Ref", "Alt", "Prob", "Mutation_Prob.", "Exon_Start",
"Exon_End", "Mutation_Position", "Total_Depth", "Tumor_Depth", "Wt_Peptide", "Mutant_Peptide",
"Wt_DNA", "Mutant_DNA", "Total_RNA", "Tumor_RNA_Ratio", "Tumor_RNA", "Tumor_RNA_based_on_DNA",
"nB", "Checker", "MutRatio", "MutRatio_Min", "MutRatio_Max")
info<-info[, 1:length(cinfo)]
if(is.null(ncol(info))) info<-t(as.matrix(info))
row.names(info)<-NULL
colnames(info)<-cinfo
info[,12]<-paste(info[,3], info[,12], sep="_")
info[, match("Tumor_RNA_based_on_DNA",colnames(info))]<-
as.numeric(info[,match("TotalRNA",colnames(info))]) *
as.numeric(info[,match("TumorDepth",colnames(info))]) /
as.numeric(info[,match("Depth",colnames(info))])
rownames(info)<-NULL
info<-info[, -match(c("Wt_DNA", "Mutant_DNA"), colnames(info))]
if(is.null(ncol(info))){info<-t(as.matrix(info))}
removeX<-which(sapply(info[,c(16)], function(x) length(grep("X", rev(strsplit(x, "")[[1]])[-1]))>0))
if(length(removeX) > 0) info<-info[-remove,]
if(is.null(ncol(info))){info<-t(as.matrix(info))}
if(nrow(info)==0) return(NULL)
full_peptide<-NULL
removeX
info[,c(16)]
full_peptide<-NULL
f<-files_part[grep("\\.peptide\\.txt", files_part)][1]
f
print(paste(dir, f, sep="/"))
test1<-scan(paste(dir, f, sep="/"), "character", sep="\n", skip=1)
test1<-gsub(" <=WB| <=SB", "", test1)
ss1<-grep(" Pos ", test1) + 2
ee1<-grep("of strong", test1) - 2
num1<-sapply(gsub("[ ]+","\t",test1[ss1]), function(x) strsplit(x, "\t")[[1]][5])
if(length(grep("cannot be found in hla_pseudo list", test1))>0) next
if(length(grep("Could not find allele", test1))>0) next
h1<-1
test[ss1[1]]
test1[ss1[1]]
gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]])[1]
d1<-t(strsplit(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), function(x) strsplit(x, "\t")[[1]][c(3,2,5,7,4,10,11)])
d1<-t(d1[sapply(d1[,5], function(x) length(grep(x, info[match(num1[h1], info[,2]), 15]))==0),])
} else {
d1<-t(sapply(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), function(x) strsplit(x, "\t")[[1]][c(2,3,4,5,10,11)]))
d1<-d1[sapply(d1[,5], function(x) length(grep(x, info[match(num1[h1], info[,2]), 15]))==0),]
}
if(nrow(d1)==0) {
r_can<-match(num1[h1], info[,2])
if(is.na(r_can)){r_can<-grep(num1[h1], info[,2])}
remove<-c(remove, r_can)
next
}
full_peptide<-rbind(full_peptide, d1)
}
}
if(is.null(full_peptide)) return(NULL)
if(nrow(full_peptide)==0) return(NULL)
#Bind Full Peptide and info
tag<-c("HLA", "Pos", "Gene", "Evaluated_Mutant_Peptide_Core", "Evaluated_Mutant_Peptide", "Mut_IC50", "Mut_Rank",
"Chr", "NM_ID", "Change", "Ref", "Alt", "Prob", "Mutation_Prob.", "Exon_Start", "Exon_End",
"Mutation_Position", "Total_Depth", "Tumor_Depth", "Wt_Peptide",
"Mutant_Peptide", "Total_RNA", "Tumor_RNA_Ratio", "Tumor_RNA",
"Tumor_RNA_based_on_DNA", "MutRatio", "MutRatio_Min", "MutRatio_Max")
colnames(full_peptide)<-tag[1:ncol(full_peptide)]
if(nrow(full_peptide)==1){
full_peptide<-cbind(full_peptide, t(info[match(substr(full_peptide[,3], 1, 10), substr(info[,2], 1, 10)),]))
} else {
full_peptide<-cbind(full_peptide, info[match(substr(full_peptide[,3], 1, 10), substr(info[,2], 1, 10)),])
}
full_peptide<-full_peptide[,match(tag, colnames(full_peptide))]
write.table(full_peptide, paste(dir, "/", file_prefix, ".CLASS2.ALL.txt", sep=""),
row.names=FALSE, col.names=TRUE, quote=FALSE, sep="\t")
}
d1<-t(sapply(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), function(x) strsplit(x, "\t")[[1]][c(2,3,4,5,10,11)]))
d1
d1<-t(sapply(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), function(x) strsplit(x, "\t")[[1]][c(c(3,2,5,7,4,10,11))]))
d1[1,]
test[ss1[1]]
test1[ss1[1]]
d1<-d1[sapply(d1[,5], function(x) length(grep(x, info[match(num1[h1], info[,2]), 15]))==0),]
d1
tag<-c("HLA", "Pos", "Gene", "Evaluated_Mutant_Peptide_Core", "Evaluated_Mutant_Peptide", "Mut_IC50", "Mut_Rank",
"Chr", "NM_ID", "Change", "Ref", "Alt", "Prob", "Mutation_Prob.", "Exon_Start", "Exon_End",
"Mutation_Position", "Total_Depth", "Tumor_Depth", "Wt_Peptide",
"Mutant_Peptide", "Total_RNA", "Tumor_RNA_Ratio", "Tumor_RNA",
"Tumor_RNA_based_on_DNA", "MutRatio", "MutRatio_Min", "MutRatio_Max")
#' Merge Results from MainSnvClass1.R
#'
#'@param input_dir Directory storing netMHCpan Results (Required).
#'
#'@param file_prefix File prefix of netMHCpan Results (Required).
#'If you have "sample_annovar.txt.NO_JOB_ID.HLACLASS1.1.peptide.txt", please set "sample_annovar.txt.NO_JOB_ID".
#'
#'@param hmdir Home directory for the analysis (Default=getwd()).
#'
#'@param annotation_file The result annotation file (${vcf}.${job_id}.peptide.txt) generated by MainSNVClass1().
#'For example, sample_vcf.txt.NO_job_id.peptide.txt.
#'
#'@return void (Calculated Neoantigen Files will be generated as .tsv files.):
#'
#'@return HLA:  HLA type used to calculate neoantigen.
#'
#'@return Pos:  The position of the fraction of peptide used to be evaluated from the full-length peptide.
#'
#'@return Gene:  Gene symbol used to be evaluated in NetMHCpan.
#'
#'@return Evaluated_Mutant_Peptide_Core:  The core peptide of the mutant peptide to be evaluated in NetMHCpan.
#'
#'@return Evaluated_Mutant_Peptide:  The mutant peptide to be evaluated.
#'
#'@return Mut_IC50: IC50 value for evaluated mutant peptide.
#'
#'@return Mut_Rank: Rank value for evaluated mutanat peptide.
#'
#'@return Chr: Chromosome Number of the mutation.
#'
#'@return NM_ID: NM_ID used to construct peptides from the mutation.
#'
#'@return Change: The annotation to be described in .vcf file.
#'
#'@return Ref: reference type nucleic acid base.
#'
#'@return Alt: alternative type nucleic acid base.
#'
#'@return Prob: A probability of reference nucleic acid base described in .vcf file.
#'
#'@return Mutation_Prob: A probability of alternative nucleic acid base described in .vcf file.
#'
#'@return Exon_Start: The exon start position of the corrsponding NM_ID.
#'
#'@return Exon_End: The exon end position of the corrsponding NM_ID.
#'
#'@return Mutation_Position: The mutation position of the corrsponding NM_ID.
#'
#'@return Total_Depth: The depth of the reference nucleic acid base.
#'
#'@return Tumor_Depth: The depth of the alternative nucleic acid base.
#'
#'@return Wt_Peptide: The full-length of the wild-type peptide.
#'
#'@return Mutant_Peptide: The full-length of the mutant peptide.
#'
#'@return Total_RNA: The expression amount of the corresponding RNA.
#'
#'@return Tumor_RNA_Ratio: The variant allele frequency of the corresponding RNA.
#'
#'@return Tumor_RNA: The modified amount of the corresponding RNA level based on RNA Reads.
#'
#'@return Tumor_RNA_based_on_DNA: The modified amount of the corresponding RNA level based on DNA Reads.
#'
#'@return MutRatio: The mean value of the cancer cell fraction probability.
#'
#'@return MutRatio_Min: The 1\% percentile of the cancer cell fraction probability.
#'
#'@return MutRatio_Max: The 99\% percentile of the cancer cell fraction probability.
#'
#'@export
MainMergeINDELClass2<-function(hmdir = getwd(),
annotation_file,
input_dir,
file_prefix){
dir<-paste(hmdir, input_dir, sep="/")
files<-list.files(paste(dir, sep="/"))
#Get Peptide Info
files_part<-files[intersect(grep("HLACLASS2", files), grep(input_file_prefix, files))]
if(length(files_part)==0){
print("No File Detected!!")
return(NULL)
}
info<-t(sapply(scan(paste(annotation_file, sep="/"), "character", sep="\n"), function(x) strsplit(x, "\t")[[1]]))
cinfo<-c("", "Gene_ID", "Chr", "NM_ID", "Change", "Ref", "Alt", "Prob", "Mutation_Prob.", "Exon_Start",
"Exon_End", "Mutation_Position", "Total_Depth", "Tumor_Depth", "Wt_Peptide", "Mutant_Peptide",
"Wt_DNA", "Mutant_DNA", "Total_RNA", "Tumor_RNA_Ratio", "Tumor_RNA", "Tumor_RNA_based_on_DNA",
"nB", "Checker", "MutRatio", "MutRatio_Min", "MutRatio_Max")
info<-info[, 1:length(cinfo)]
if(is.null(ncol(info))) info<-t(as.matrix(info))
row.names(info)<-NULL
colnames(info)<-cinfo
info[,12]<-paste(info[,3], info[,12], sep="_")
info[, match("Tumor_RNA_based_on_DNA",colnames(info))]<-
as.numeric(info[,match("TotalRNA",colnames(info))]) *
as.numeric(info[,match("TumorDepth",colnames(info))]) /
as.numeric(info[,match("Depth",colnames(info))])
#Remove RNAseq Info
rownames(info)<-NULL
info<-info[, -match(c("Wt_DNA", "Mutant_DNA"), colnames(info))]
if(is.null(ncol(info))){info<-t(as.matrix(info))}
#Include Stop Codon
removeX<-which(sapply(info[,c(16)], function(x) length(grep("X", rev(strsplit(x, "")[[1]])[-1]))>0))
if(length(removeX) > 0) info<-info[-remove,]
if(is.null(ncol(info))){info<-t(as.matrix(info))}
if(nrow(info)==0) return(NULL)
#allele,start,end,length,peptide,ic50,Rank,Peptide_Normal_Sep,norm_ic_50,norm_Rank
full_peptide<-NULL
for(f in files_part[grep("\\.peptide\\.txt", files_part)]){
print(paste(dir, f, sep="/"))
test1<-scan(paste(dir, f, sep="/"), "character", sep="\n", skip=1)
test1<-gsub(" <=WB| <=SB", "", test1)
ss1<-grep(" Pos ", test1) + 2
ee1<-grep("of strong", test1) - 2
num1<-sapply(gsub("[ ]+","\t",test1[ss1]), function(x) strsplit(x, "\t")[[1]][5])
if(length(grep("cannot be found in hla_pseudo list", test1))>0) next
if(length(grep("Could not find allele", test1))>0) next
for(h1 in 1:length(num1)){
if(ss1[h1] == ee1[h1]){
d1<-t(strsplit(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), "\t")[[1]][c(3,2,5,7,4,10,11)])
d1<-t(d1[sapply(d1[,5], function(x) length(grep(x, info[match(num1[h1], info[,2]), 15]))==0),])
} else {
d1<-t(sapply(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), function(x) strsplit(x, "\t")[[1]][c(3,2,5,7,4,10,11)]))
d1<-d1[sapply(d1[,5], function(x) length(grep(x, info[match(num1[h1], info[,2]), 15]))==0),]
}
if(nrow(d1)==0) {
r_can<-match(num1[h1], info[,2])
if(is.na(r_can)){r_can<-grep(num1[h1], info[,2])}
remove<-c(remove, r_can)
next
}
full_peptide<-rbind(full_peptide, d1)
}
}
if(is.null(full_peptide)) return(NULL)
if(nrow(full_peptide)==0) return(NULL)
#Bind Full Peptide and info
tag<-c("HLA", "Pos", "Gene", "Evaluated_Mutant_Peptide_Core", "Evaluated_Mutant_Peptide", "Mut_IC50", "Mut_Rank",
"Chr", "NM_ID", "Change", "Ref", "Alt", "Prob", "Mutation_Prob.", "Exon_Start", "Exon_End",
"Mutation_Position", "Total_Depth", "Tumor_Depth", "Wt_Peptide",
"Mutant_Peptide", "Total_RNA", "Tumor_RNA_Ratio", "Tumor_RNA",
"Tumor_RNA_based_on_DNA", "MutRatio", "MutRatio_Min", "MutRatio_Max")
colnames(full_peptide)<-tag[1:ncol(full_peptide)]
if(nrow(full_peptide)==1){
full_peptide<-cbind(full_peptide, t(info[match(substr(full_peptide[,3], 1, 10), substr(info[,2], 1, 10)),]))
} else {
full_peptide<-cbind(full_peptide, info[match(substr(full_peptide[,3], 1, 10), substr(info[,2], 1, 10)),])
}
full_peptide<-full_peptide[,match(tag, colnames(full_peptide))]
write.table(full_peptide, paste(dir, "/", file_prefix, ".CLASS2.ALL.txt", sep=""),
row.names=FALSE, col.names=TRUE, quote=FALSE, sep="\t")
}
MainMergeINDELClass1(input_dir = input_dir,
file_prefix = file_prefix,
annotation_file = annotation_file)
#' Merge Results from MainSnvClass1.R
#'
#'@param input_dir Directory storing netMHCpan Results (Required).
#'
#'@param file_prefix File prefix of netMHCpan Results (Required).
#'If you have "sample_annovar.txt.NO_JOB_ID.HLACLASS1.1.peptide.txt", please set "sample_annovar.txt.NO_JOB_ID".
#'
#'@param hmdir Home directory for the analysis (Default=getwd()).
#'
#'@param annotation_file The result annotation file (${vcf}.${job_id}.peptide.txt) generated by MainSNVClass1().
#'For example, sample_vcf.txt.NO_job_id.peptide.txt.
#'
#'@return void (Calculated Neoantigen Files will be generated as .tsv files.):
#'
#'@return HLA:  HLA type used to calculate neoantigen.
#'
#'@return Pos:  The position of the fraction of peptide used to be evaluated from the full-length peptide.
#'
#'@return Gene:  Gene symbol used to be evaluated in NetMHCpan.
#'
#'@return Evaluated_Mutant_Peptide_Core:  The core peptide of the mutant peptide to be evaluated in NetMHCpan.
#'
#'@return Evaluated_Mutant_Peptide:  The mutant peptide to be evaluated.
#'
#'@return Mut_IC50: IC50 value for evaluated mutant peptide.
#'
#'@return Mut_Rank: Rank value for evaluated mutanat peptide.
#'
#'@return Chr: Chromosome Number of the mutation.
#'
#'@return NM_ID: NM_ID used to construct peptides from the mutation.
#'
#'@return Change: The annotation to be described in .vcf file.
#'
#'@return Ref: reference type nucleic acid base.
#'
#'@return Alt: alternative type nucleic acid base.
#'
#'@return Prob: A probability of reference nucleic acid base described in .vcf file.
#'
#'@return Mutation_Prob: A probability of alternative nucleic acid base described in .vcf file.
#'
#'@return Exon_Start: The exon start position of the corrsponding NM_ID.
#'
#'@return Exon_End: The exon end position of the corrsponding NM_ID.
#'
#'@return Mutation_Position: The mutation position of the corrsponding NM_ID.
#'
#'@return Total_Depth: The depth of the reference nucleic acid base.
#'
#'@return Tumor_Depth: The depth of the alternative nucleic acid base.
#'
#'@return Wt_Peptide: The full-length of the wild-type peptide.
#'
#'@return Mutant_Peptide: The full-length of the mutant peptide.
#'
#'@return Total_RNA: The expression amount of the corresponding RNA.
#'
#'@return Tumor_RNA_Ratio: The variant allele frequency of the corresponding RNA.
#'
#'@return Tumor_RNA: The modified amount of the corresponding RNA level based on RNA Reads.
#'
#'@return Tumor_RNA_based_on_DNA: The modified amount of the corresponding RNA level based on DNA Reads.
#'
#'@return MutRatio: The mean value of the cancer cell fraction probability.
#'
#'@return MutRatio_Min: The 1\% percentile of the cancer cell fraction probability.
#'
#'@return MutRatio_Max: The 99\% percentile of the cancer cell fraction probability.
#'
#'@export
MainMergeINDELClass1<-function(hmdir = getwd(),
annotation_file,
input_dir,
file_prefix){
dir<-paste(hmdir, input_dir, sep="/")
files<-list.files(paste(dir, sep="/"))
#Get Peptide Info
files_part<-files[intersect(grep("HLACLASS1", files), grep(input_file_prefix, files))]
if(length(files_part)==0){
print("No File Detected!!")
return(NULL)
}
info<-t(sapply(scan(paste(annotation_file, sep="/"), "character", sep="\n"), function(x) strsplit(x, "\t")[[1]]))
cinfo<-c("", "Gene_ID", "Chr", "NM_ID", "Change", "Ref", "Alt", "Prob", "Mutation_Prob.", "Exon_Start",
"Exon_End", "Mutation_Position", "Total_Depth", "Tumor_Depth", "Wt_Peptide", "Mutant_Peptide",
"Wt_DNA", "Mutant_DNA", "Total_RNA", "Tumor_RNA_Ratio", "Tumor_RNA", "Tumor_RNA_based_on_DNA",
"nB", "Checker", "MutRatio", "MutRatio_Min", "MutRatio_Max")
info<-info[, 1:length(cinfo)]
if(is.null(ncol(info))) info<-t(as.matrix(info))
row.names(info)<-NULL
colnames(info)<-cinfo
info[,12]<-paste(info[,3], info[,12], sep="_")
info[, match("Tumor_RNA_based_on_DNA",colnames(info))]<-
as.numeric(info[,match("TotalRNA",colnames(info))]) *
as.numeric(info[,match("TumorDepth",colnames(info))]) /
as.numeric(info[,match("Depth",colnames(info))])
#Remove RNAseq Info
rownames(info)<-NULL
info<-info[, -match(c("Wt_DNA", "Mutant_DNA"), colnames(info))]
if(is.null(ncol(info))){info<-t(as.matrix(info))}
#Include Stop Codon
removeX<-which(sapply(info[,c(16)], function(x) length(grep("X", rev(strsplit(x, "")[[1]])[-1]))>0))
if(length(removeX) > 0) info<-info[-remove,]
if(is.null(ncol(info))){info<-t(as.matrix(info))}
if(nrow(info)==0) return(NULL)
#allele,start,end,length,peptide,ic50,Rank,Peptide_Normal_Sep,norm_ic_50,norm_Rank
full_peptide<-NULL
for(f in files_part[grep("\\.peptide\\.txt", files_part)]){
print(paste(dir, f, sep="/"))
test1<-scan(paste(dir, f, sep="/"), "character", sep="\n", skip=1)
test1<-gsub(" <= WB", "", test1)
ss1<-grep(" Pos ", test1)+2
ee1<-grep("Protein", test1)-2
num1<-sapply(gsub("[ ]+","\t",test1[ss1]), function(x) strsplit(x, "\t")[[1]][12])
if(length(grep("cannot be found in hla_pseudo list", test1))>0) next
if(length(grep("Could not find allele", test1))>0) next
for(h1 in 1:length(num1)){
if(ss1[h1] == ee1[h1]){
d1<-t(strsplit(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), "\t")[[1]][c(3,2,12,11,4,14,15)])
d1<-t(d1[sapply(d1[,5], function(x) length(grep(x, info[match(num1[h1], info[,2]), 15]))==0),])
} else {
d1<-t(sapply(gsub("[ ]+", "\t", test1[ss1[h1]:ee1[h1]]), function(x) strsplit(x, "\t")[[1]][c(3,2,12,11,4,14,15)]))
d1<-d1[sapply(d1[,5], function(x) length(grep(x, info[match(num1[h1], info[,2]), 15]))==0),]
}
if(nrow(d1)==0) {
r_can<-match(num1[h1], info[,2])
if(is.na(r_can)){r_can<-grep(num1[h1], info[,2])}
remove<-c(remove, r_can)
next
}
full_peptide<-rbind(full_peptide, d1)
}
}
if(is.null(full_peptide)) return(NULL)
if(nrow(full_peptide)==0) return(NULL)
#Bind Full Peptide and info
tag<-c("HLA", "Pos", "Gene", "Evaluated_Mutant_Peptide_Core", "Evaluated_Mutant_Peptide", "Mut_IC50", "Mut_Rank",
"Chr", "NM_ID", "Change", "Ref", "Alt", "Prob", "Mutation_Prob.", "Exon_Start", "Exon_End",
"Mutation_Position", "Total_Depth", "Tumor_Depth", "Wt_Peptide",
"Mutant_Peptide", "Total_RNA", "Tumor_RNA_Ratio", "Tumor_RNA",
"Tumor_RNA_based_on_DNA", "MutRatio", "MutRatio_Min", "MutRatio_Max")
colnames(full_peptide)<-tag[1:ncol(full_peptide)]
if(nrow(full_peptide)==1){
full_peptide<-cbind(full_peptide, t(info[match(substr(full_peptide[,3], 1, 10), substr(info[,2], 1, 10)),]))
} else {
full_peptide<-cbind(full_peptide, info[match(substr(full_peptide[,3], 1, 10), substr(info[,2], 1, 10)),])
}
full_peptide<-full_peptide[,match(tag, colnames(full_peptide))]
write.table(full_peptide, paste(dir, "/", file_prefix, ".CLASS1.ALL.txt", sep=""),
row.names=FALSE, col.names=TRUE, quote=FALSE, sep="\t")
}
input_dir <- "result.sample.NO_job_id_INDEL/"
file_prefix <- "NO_job_id_INDEL"
annotation_file<-"lib/data/sample_vcf.txt.NO_JOB_ID_INDEL.peptide.txt"
MainMergeINDELClass1(input_dir = input_dir,
file_prefix = file_prefix,
annotation_file = annotation_file)
MainMergeINDELClass2(input_dir = input_dir,
file_prefix = file_prefix,
annotation_file = annotation_file)
55/1951
#Initial Setting
file_name_in_hla_table = input_file
hmdir = getwd()
refflat_file = paste(hmdir, "/lib/refFlat.txt", sep="")
refmrna_file = paste(hmdir, "/lib/refMrna.merge.fa", sep="")
job_id = "NO_job_id"
rnaexp_file = NA
rnabam_file = NA
cnv_file=NA
ccfp_dir = paste(hmdir, "lib/ccfp.jar", sep="")
purity = 1
netMHCpan_dir = paste(hmdir, "/lib/netMHCpan-3.0/netMHCIIpan", sep="")
netMHCIIpan_dir = paste(hmdir, "/lib/netMHCIIpan-3.1/netMHCIIpan", sep="")
refdna_file = paste(hmdir, "/lib/GRCh37.fa", sep="")
samtools_dir = NA
bcftools_dir = NA
chr_column = NA
mutation_start_column = NA
mutation_end_column = NA
mutation_ref_column = NA
mutation_alt_column = NA
nm_id_column = NA
depth_normal_column = NA
depth_tumor_column = NA
ambiguous_between_exon = 0
ambiguous_codon = 0
peptide_length = c(8, 9, 10, 11, 12, 13)
hmdir = getwd()
input_file = "lib/data/sample_vcf.txt"
job_id  = "NO_JOB_ID"
file_name_in_hla_table = "sample"
hla_file = "lib/data/sample_hla_table_c1.txt"
refflat_file  = "lib/refFlat.txt"
refmrna_file = "lib/refMrna.merge.fa"
rnaexp_file = "lib/data/sample_rna_exp.txt"
cnv_file = "lib/data/sample_copynum.txt"
purity = 0.8
samtools_dir = "lib/samtools-0.1.19/samtools"
bcftools_dir = "lib/samtools-0.1.19/bcftools/bcftools"
ccfp_dir = "lib/ccfp.jar"
netMHCpan_dir = "lib/netMHCpan-3.0/netMHCpan"
if(CheckRequiredFiles(input_file, hla_file, refflat_file, refmrna_file)) return(NULL)
flg<-CheckRequiredColumns(chr_column, mutation_start_column, mutation_end_column,
mutation_ref_column, mutation_alt_column, nm_id_column,
depth_normal_column, depth_tumor_column)
if(length(flag)<=1) {
return(NULL)
} else {
chr_column = flg[1]
mutation_start_column = flag[2]
mutation_end_column = flag[3]
mutation_ref_column = flag[4]
mutation_alt_column = flag[5]
nm_id_column = flag[6]
depth_normal_column = flag[7]
depth_tumor_column = flag[8]
}
job_id = paste(job_id, "SVExon", sep = "_")
GenerateSVExonSeq
