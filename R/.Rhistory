refmrna_file = "lib/refMrna.fa",
rnaexp_file = "lib/data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-3.0/netMHCpan",
nm_id_column = 9
)
library(Neoantimon)
MainSNVClass1(input_file = "lib/data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "lib/data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "lib/data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-3.0/netMHCpan",
nm_id_column = 9
)
install_github('hase62/Neoantimon')
library(devtools)
install_github('hase62/Neoantimon');
library(Neoantimon);
MainSNVClass1(input_file = "lib/data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "lib/data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "lib/data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-3.0/netMHCpan",
nm_id_column = 9
)
MainSNVClass1(input_file = "lib/data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "lib/data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "lib/data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-3.0/netMHCpan",
nm_id_column = 9
)
MainSNVClass1
CheckRequiredColumns<-function(input_file,
chr_column,
mutation_start_column,
mutation_end_column,
mutation_ref_column,
mutation_alt_column,
nm_id_column,
depth_normal_column,
depth_tumor_column
){
index<-scan(input_file, "character", nlines = 1)
if(is.na(chr_column)) {
chr_column<-grep("chr", tolower(index))[1];
if(is.na(chr_column)) {
print("Please Manually Indicate chr_column")
return(0)
}
}
print(paste("Set chr_column as", chr_column))
if(is.na(mutation_start_column)) {
mutation_start_column<-grep("start", tolower(index))[1];
if(is.na(mutation_start_column)) {
print("Please Manually Indicate mutation_start_column")
return(0)
}
}
print(paste("Set mutation_start_column as", mutation_start_column))
if(is.na(mutation_end_column)) {
mutation_end_column<-grep("end", tolower(index))[1];
if(is.na(mutation_end_column)) {
print("Please Manually Indicate mutation_end_column")
return(0)
}
}
print(paste("Set mutation_end_column as", mutation_end_column))
if(is.na(mutation_ref_column)) {
mutation_ref_column<-grep("ref", tolower(index))[1];
if(is.na(mutation_ref_column)) {
print("Please Manually Indicate mutation_ref_column")
return(0)
}
}
print(paste("Set mutation_ref_column as", mutation_ref_column))
if(is.na(mutation_alt_column)) {
mutation_alt_column<-grep("alt", tolower(index))[1];
if(is.na(mutation_alt_column)) {
print("Please Manually Indicate mutation_alt_column")
return(0)
}
}
print(paste("Set mutation_alt_column as", mutation_alt_column))
if(is.na(depth_normal_column)) {
depth_normal_column<-intersect(grep("depth", tolower(index)), grep("normal", tolower(index)))[1];
if(is.na(depth_normal_column)) {
print("Please Manually Indicate depth_normal_column")
}
}
print(paste("Set depth_normal_column as", depth_normal_column))
if(is.na(depth_tumor_column)) {
depth_tumor_column<-intersect(grep("depth", tolower(index)), grep("tumor", tolower(index)))[1];
if(is.na(depth_tumor_column)) {
print("Please Manually Indicate depth_tumor_column")
}
}
print(paste("Set depth_tumor_column as", depth_tumor_column))
index<-scan(input_file, "character", nlines = 1, skip = 1)
if(is.na(nm_id_column)) {
nm_id_column<-grep("nm_|nr_", tolower(index))[1];
if(is.na(nm_id_column)) {
print("Please Manually Indicate nm_id_column")
return(0)
}
}
print(paste("Set nm_id_column as", nm_id_column))
return(c(chr_column,
mutation_start_column,
mutation_end_column,
mutation_ref_column,
mutation_alt_column,
nm_id_column,
depth_normal_column,
depth_tumor_column))
}
MainSNVClass1(input_file = "lib/data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "lib/data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "lib/data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-3.0/netMHCpan",
nm_id_column = 9
)
install_github('hase62/Neoantimon');
library(Neoantimon);
MainSNVClass1(input_file = "lib/data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "lib/data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "lib/data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-3.0/netMHCpan",
nm_id_column = 9
)
MainSNVClass1(input_file = "lib/data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "lib/data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "lib/data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-3.0/netMHCpan",
nm_id_column = 9
)
MainSNVClass1(input_file = "lib/data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "lib/data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "lib/data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-3.0/netMHCpan",
nm_id_column = 9
)
MainSNVClass1(input_file = "lib/data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "lib/data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "lib/data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-3.0/netMHCpan",
nm_id_column = 9
)
MainSNVClass1(input_file = "lib/data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "lib/data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "lib/data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-3.0/netMHCpan",
nm_id_column = 10
)
MainSNVClass1(input_file = "lib/data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "lib/data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "lib/data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-3.0/netMHCpan",
nm_id_column = 10,
depth_tumor_column = 12,
depth_tumor_column = 14
)
MainSNVClass2(input_file = "lib/data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "lib/data/sample_hla_table_c2.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "lib/data/sample_rna_exp.txt",
netMHCIIpan_dir = "lib/netMHCIIpan-3.1/netMHCIIpan",
nm_id_column = 10,
depth_tumor_column = 12,
depth_tumor_column = 14
)
MainSNVClass1(input_file = "lib/data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "lib/data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "lib/data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-3.0/netMHCpan",
nm_id_column = 10,
depth_tumor_column = 12,
depth_normal_column = 14
)
MainSNVClass2(input_file = "lib/data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "lib/data/sample_hla_table_c2.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "lib/data/sample_rna_exp.txt",
netMHCIIpan_dir = "lib/netMHCIIpan-3.1/netMHCIIpan",
nm_id_column = 10,
depth_tumor_column = 12,
depth_normal_column = 14
)
MainINDELClass1(input_file = "lib/data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "lib/data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "lib/data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-3.0/netMHCpan",
nm_id_column = 10,
depth_tumor_column = 12,
depth_normal_column = 14
)
MainINDELClass2(input_file = "lib/data/sample_vcf.txt",
file_name_in_hla_table = "sample",
hla_file = "lib/data/sample_hla_table_c2.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "lib/data/sample_rna_exp.txt",
netMHCIIpan_dir = "lib/netMHCIIpan-3.1/netMHCIIpan",
nm_id_column = 10,
depth_tumor_column = 12,
depth_normal_column = 14
)
MainMergeSNVClass1(input_dir = "result.sample.NO_job_id_SNV",
file_prefix = "NO_job_id_SNV",
annotation_file = "lib/data/sample_vcf.txt.NO_job_id_SNV.peptide.txt")
MainMergeSNVClass2(input_dir = "result.sample.NO_job_id_SNV",
file_prefix = "NO_job_id_SNV",
annotation_file = "lib/data/sample_vcf.txt.NO_job_id_SNV.peptide.txt")
MainSVFUSIONClass1(input_file = "lib/data/sample_sv_bnd.tsv",
file_name_in_hla_table = "sample",
hla_file = "lib/data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "lib/data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-3.0/netMHCpan",
refdna_file = "lib/GRCh37.fa",
mutation_alt_bnd_column = 5,
gene_symbol_column = 7,
mate_id_column = 8
)
MainSVFUSIONClass1(input_file = "lib/data/sample_sv_bnd.txt",
file_name_in_hla_table = "sample",
hla_file = "lib/data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "lib/data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-3.0/netMHCpan",
refdna_file = "lib/GRCh37.fa",
mutation_alt_bnd_column = 5,
gene_symbol_column = 7,
mate_id_column = 8
)
#'Calculate Neoantigen Candidates on SV fusions for MHC Class1
#'
#'@param input_file (Required) An input vcf file (BND format) annotated by, e.g., ANNOVAR (http://annovar.openbioinformatics.org/en/latest/) or other softwares.
#'See by data(sample_sv_bnd); sample_sv_bnd;
#'
#'@param hla_file (Required) A tab separated file indicating HLA types.
#'The 1st column is input_file name, and the following columns indicate HLA types.
#'See by data(sample_hla_table_c1); sample_hla_table_c1;
#'
#'@param refdna_file (Required) refdna_file information to be used to create SVs Region (Default=NA).
#'See "https://github.com/hase62/Neoantimon"
#'
#'@param nm_id_column (Required if gene_symbol_column = NA) The column number describing NM IDs in input_file such as "SLCO1C1:NM_001145944:exon7:c.692_693insG:p.L231fs" (Default=NA).
#'
#'@param gene_symbol_column (Required if nm_id_column = NA) The column number describing gene symbol in input_file (Default=NA).
#'
#'@param mate_id_column (Required) The column indicating mateIDs or svIDs such as "SVMERGE1_1" (Default=NA).
#'
#'@param file_name_in_hla_table If the name (1st column) in HLA table is not the same as input_file, indicate the corresponding name (Default=input_file).
#'
#'@param hmdir Home directory for the analysis (Default = getwd()).
#'
#'@param job_id Job-Id to be attached in output files (Default = "NO_job_id").
#'
#'@param export_dir The directory will be stored results (Default = "paste("result", file_name_in_hla_table, job_id, sep=".")")
#'
#'@param peptide_length Peptide Length to be generated (Default = {8,9,10,11,12,13}).
#'
#'@param chr_column The column number describing chromosome number in input_file (Default=NA, but will automatically search "Chr" in header).
#'
#'@param mutation_start_column The column number describing mutation start Position in input_file (Default=NA, but will automatically search "Start" in header) .
#'
#'@param mutation_end_column The column number describing mutation end Position in input_file (Default=NA, but will automatically search "End" in header).
#'
#'@param mutation_ref_column The column number describing mutation Ref in input_file (Default=NA, but will automatically search "Ref" in header).
#'
#'@param mutation_alt_bnd_column The column number describing mutation Alt (BND format) in input_file (Default=NA, but will automatically search "Alt" in header).
#'
#'@param depth_normal_column The column number describing the read count from normal cells (Default = NA).
#'
#'@param depth_tumor_column The column number describing the read count from tumor cells (Default = NA).
#'
#'@param ambiguous_between_exon The maximum number to permit the differences between Exon-Lengths from refFlat and refMrna (Default=0).
#'
#'@param ambiguous_codon The maximum number to permit the differences between inputfile- and refMrna-oriented translation start/end position (Default=0).
#'
#'@param refflat_file refFlat file to be used in constructing peptide. (Default=paste(hmdir, "lib/refFlat.txt",sep="").
#'See "https://github.com/hase62/Neoantimon"
#'
#'@param refmrna_file refMrna file to be used in constructing peptide (Default=paste(hmdir, "lib/refMrna.merge.fa",sep="").
#'See "https://github.com/hase62/Neoantimon"
#'
#'@param rnaexp_file A file including RNA expressions (Default=NA).
#'The 1st, 2nd and 3rd columns are "GeneSymbol Chr:Exonstart-Exonend(locus) ExpressionAmount", respectively.
#'The 1st row should be any header.
#'See by data(sample_rna_exp); sample_rna_exp;
#'
#'@param rnabam_file RNA bam file to calculate variant allele frequency of RNA at each mutation (Default=NA).
#'
#'
#'
#'
#'@param cnv_file A file including copy number variation to calculate cancer cell fraction probability (CCFP) (Default=NA).
#'The format is according to ASCAT (https://www.crick.ac.uk/peter-van-loo/software/ASCAT) output files.
#'The columns are "SNPName Chromosome Position LogR segmentedLogR BAF segmentedBAF CopyNumber MinorAllele RawCopyNumber"
#'The 1st row should be the above header.
#'See data(sample_copynum); sample_copynum;
#'
#'@param purity Tumor purity or tumor contents ratio required to calculate CCFP (Default=1).
#'
#'@param netMHCpan_dir The file directory to netMHCpan (Default="lib/netMHCpan-3.0/netMHCpan").
#'
#'@param samtools_dir The file directory to samtools_0_x_x (Default="samtools").
#'It shouled be indicated when you indicate RNA-bam and try to calculate RNA VAF .
#'
#'@param bcftools_dir The file directory to netMHCpan (Default="bcftools").
#'It shouled be indicated when you indicate RNA-bam and try to calculate RNA VAF .
#'samtools 0_x_x includes bcftools in the directory.
#'
#'@return void (Calculated Neoantigen Files will be generated as .tsv files.)
#'
#'@export
MainSVFUSIONClass1<-function(input_file,
hla_file,
file_name_in_hla_table = input_file,
refflat_file = paste(hmdir, "lib/refFlat.txt", sep="/"),
refmrna_file = paste(hmdir, "lib/refMrna.merge.fa", sep="/"),
hmdir = getwd(),
job_id = "NO_job_id",
export_dir = paste("result", file_name_in_hla_table, job_id, sep="."),
rnaexp_file = NA,
rnabam_file = NA,
cnv_file=NA,
purity = 1,
netMHCpan_dir = paste(hmdir, "lib/netMHCpan-3.0/netMHCIIpan", sep="/"),
refdna_file = NA,
samtools_dir = NA,
bcftools_dir = NA,
chr_column = NA,
mutation_start_column = NA,
mutation_end_column = NA,
mutation_ref_column = NA,
mutation_alt_bnd_column = NA,
depth_normal_column = NA,
depth_tumor_column = NA,
nm_id_column = NA,
ambiguous_between_exon = 0,
ambiguous_codon = 0,
peptide_length = c(8, 9, 10, 11, 12, 13),
gene_symbol_column = NA,
mate_id_column = NA){
#Check Required Files
if(CheckRequiredFiles(input_file = input_file,
hla_file = hla_file,
refflat_file = refflat_file,
refmrna_file = refmrna_file)) return(NULL)
flg<-CheckRequiredColumns(input_file = input_file,
chr_column = chr_column,
mutation_start_column = mutation_start_column,
mutation_end_column = mutation_end_column,
mutation_ref_column = mutation_ref_column,
mutation_alt_column = mutation_alt_bnd_column,
nm_id_column = nm_id_column,
depth_normal_column = depth_normal_column,
depth_tumor_column = depth_tumor_column)
#Check nm_id and gene_symbol
if(is.na(nm_id_column) & is.na(gene_symbol_column)) {
print("Please Specify nm_id_column or genesymbol column")
return(NULL)
}
#Check nm_id and gene_symbol
if(is.na(mate_id_column)) {
print("Please Specify mate_id_column")
return(NULL)
}
#Check and Set Required Columns
if(length(flg)<=1 | (is.na(nm_id_column) & is.na(gene_symbol_column))) {
return(NULL)
} else {
chr_column = flg[1]
mutation_start_column = flg[2]
mutation_end_column = flg[3]
mutation_ref_column = flg[4]
mutation_alt_bnd_column = flg[5]
nm_id_column = flg[6]
depth_normal_column = flg[7]
depth_tumor_column = flg[8]
}
#Generate FASTA and mutation Profile
job_id = paste(job_id, "SVFusion", sep = "_")
GenerateSVFusionSeq(input_file = input_file,
hmdir = hmdir,
job_id = job_id,
refflat_file = refflat_file,
refmrna_file = refmrna_file,
max_peptide_length = max(peptide_length),
chr_column = chr_column,
mutation_start_column = mutation_start_column,
mutation_end_column = mutation_end_column,
mutation_ref_column = mutation_ref_column,
mutation_alt_bnd_column = mutation_alt_bnd_column,
nm_id_column = nm_id_column,
gene_symbol_column = gene_symbol_column,
depth_normal_column = depth_normal_column,
depth_tumor_column = depth_tumor_column,
mate_id_column = mate_id_column,
ambiguous_between_exon = ambiguous_between_exon,
ambiguous_codon = ambiguous_codon)
output_peptide_txt_file<-paste(input_file, ".", job_id, ".peptide.txt", sep="")
if(!file.exists(output_peptide_txt_file)){
print("Could not Generate Mutation File for Calculating Neoantigens. Finish.")
return(NULL)
}
RNAExpression(rnaexp_file,
output_peptide_txt_file,
width = 2,
samtools_dir,
refdna_file,
rnabam_file,
bcftools_dir,
indel = TRUE)
CCFP.Calc(cnv_file,
output_peptide_txt_file,
purity)
#NetMHCpan
if(is.na(netMHCpan_dir) | !file.exists(netMHCpan_dir)) {
print(paste("Did not find", netMHCpan_dir))
return(NULL)
}
print(paste("Executing netMHCpan to", export_dir))
SettingNetMHCpan(netMHCpan_dir)
if(!dir.exists(export_dir)) dir.create(export_dir, recursive = TRUE)
hla<-t(sapply(scan(hla_file, "character", sep="\n"), function(x) strsplit(x, "\t")[[1]]))
hit<-match(file_name_in_hla_table, hla[,1])
if(is.na(hit)) {
print(file_name_in_hla_table, "is not included in", hla_file)
return (NULL)
}
hla_types<-hla[hit, -1]
for(pep in c("peptide")){
COUNT<-1
for(hla_type in hla_types){
paste("Calculating", pep, hla_type)
system(paste(netMHCpan_dir,
" -l ", paste(peptide_length, collapse = ","),
" -f ", paste(input_file, job_id, pep,"fasta",sep="."),
" -a HLA-", gsub("\\*","",hla_type),
" > ", export_dir, "/", job_id, ".HLACLASS1.", COUNT, ".", pep, ".txt", sep=""))
COUNT <- COUNT + 1
}
}
print("Successfully Finished.")
}
MainSVFUSIONClass1(input_file = "lib/data/sample_sv_bnd.txt",
file_name_in_hla_table = "sample",
hla_file = "lib/data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "lib/data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-3.0/netMHCpan",
refdna_file = "lib/GRCh37.fa",
mutation_alt_bnd_column = 5,
gene_symbol_column = 7,
mate_id_column = 8
)
install_github('hase62/Neoantimon');
library(Neoantimon);
MainSVFUSIONClass1(input_file = "lib/data/sample_sv_bnd.txt",
file_name_in_hla_table = "sample",
hla_file = "lib/data/sample_hla_table_c1.txt",
refflat_file  = "lib/refFlat.txt",
refmrna_file = "lib/refMrna.fa",
rnaexp_file = "lib/data/sample_rna_exp.txt",
netMHCpan_dir = "lib/netMHCpan-3.0/netMHCpan",
refdna_file = "lib/GRCh37.fa",
mutation_alt_bnd_column = 5,
gene_symbol_column = 7,
mate_id_column = 8
)
