source("Functions/CodonTable.R")
source("Functions/TryCatch2.R")
source("Functions/GenerateMutatedSeq.R")
source("Functions/GenerateIndelSeq.R")
source("Functions/GenerateListForGetRNASeq.R")
source("Functions/GetRNAseq.R")
source("Functions/TryCatch2.R")
source("Functions/GenerateListForCCFP.R")
source("Functions/GetRatio.R")
source("Functions/MainSNVClass1.R")
source("Functions/MainSNVClass2.R")
source("Functions/MainINDELClass1.R")
source("Functions/MainINDELClass2.R")
source("Functions/MainMergeClass1.R")
source("Functions/MainMergeClass2.R")
MainSNVClass1(hmdir = getwd(),
input_file = "./../lib_sample/sample_annovar.txt",
job_ID = "NO_JOB_ID",
file_name_in_HLA_table = "096b4f32-10c1-4737-a0dd-cae04c54ee33",
HLA_file = "./../lib_sample/hla_table.txt",
RNAseq_file = "./../lib_sample/RNAseq.txt",
RNA_bam="./../lib_sample/RNAbam.bam",
CNV="./../lib_sample/Copy.txt",
Purity = 0.719526227140365,
refDNA = "./../lib_int/GRCh37.fa")
MainMergeClass1(hmdir = getwd(),
input_dir = "./../lib_sample",
input_file_prefix = "sample_annovar",
Tumor_RNA_BASED_ON_DNA = TRUE)
MainSNVClass1(hmdir = getwd(),
input_file = "./../lib_sample/sample_genomon.txt",
job_ID = "NO_JOB_ID",
file_name_in_HLA_table = "096b4f32-10c1-4737-a0dd-cae04c54ee33",
HLA_file = "./../lib_sample/hla_table.txt",
RNAseq_file = "./../lib_sample/RNAseq.txt",
RNA_bam="./../lib_sample/RNAbam.bam",
CNV="./../lib_sample/Copy.txt",
Purity = 0.719526227140365,
refDNA = "./../lib_int/GRCh37.fa",
Depth_Normal_Column = 53, Depth_Tumor_Column = 51)
MainMergeClass1(hmdir = getwd(),
input_dir = "./../lib_sample",
input_file_prefix = "sample_genomon",
Tumor_RNA_BASED_ON_DNA = TRUE)
MainSNVClass1(hmdir = getwd(),
input_file = "./../lib_sample/sample_genomon.txt",
job_ID = "NO_JOB_ID",
file_name_in_HLA_table = "096b4f32-10c1-4737-a0dd-cae04c54ee33",
HLA_file = "./../lib_sample/hla_table.txt",
RNAseq_file = "./../lib_sample/RNAseq.txt",
RNA_bam="./../lib_sample/RNAbam.bam",
CNV="./../lib_sample/Copy.txt",
Purity = 0.719526227140365,
refDNA = "./../lib_int/GRCh37.fa",
Depth_Normal_Column = 53, Depth_Tumor_Column = 51)
MainMergeClass1(hmdir = getwd(),
input_dir = "./../lib_sample",
input_file_prefix = "sample_genomon",
Tumor_RNA_BASED_ON_DNA = TRUE)
MainSNVClass2(hmdir = getwd(),
input_file="./../lib_sample/sample_annovar.txt",
job_ID = "NO_JOB_ID",
file_name_in_HLA_table = "096b4f32-10c1-4737-a0dd-cae04c54ee33",
HLA_file = "./../lib_sample/hla_table2.txt",
RNAseq_file = "./../lib_sample/RNAseq.txt",
RNA_bam="./../lib_sample/RNAbam.bam",
CNV="./../lib_sample/Copy.txt",
Purity = 0.719526227140365,
refDNA = "./../lib_int/GRCh37.fa")
MainMergeClass2(hmdir = getwd(),
input_dir = "./../lib_sample",
input_file_prefix = "sample_annovar",
Tumor_RNA_BASED_ON_DNA = TRUE)
MainSNVClass2(hmdir = getwd(),
input_file="./../lib_sample/sample_genomon.txt",
job_ID = "NO_JOB_ID",
file_name_in_HLA_table = "096b4f32-10c1-4737-a0dd-cae04c54ee33",
HLA_file = "./../lib_sample/hla_table2.txt",
RNAseq_file = "./../lib_sample/RNAseq.txt",
RNA_bam="./../lib_sample/RNAbam.bam",
CNV="./../lib_sample/Copy.txt",
Purity = 0.719526227140365,
refDNA = "./../lib_int/GRCh37.fa",
Depth_Normal_Column = 53, Depth_Tumor_Column = 51)
MainMergeClass2(hmdir = getwd(),
input_dir = "./../lib_sample",
input_file_prefix = "sample_genomon",
Tumor_RNA_BASED_ON_DNA = TRUE)
MainINDELClass1(hmdir = getwd(),
input_file = "./../lib_sample/sample_genomon.txt",
job_ID = "NO_JOB_ID",
file_name_in_HLA_table = "096b4f32-10c1-4737-a0dd-cae04c54ee33",
HLA_file = "./../lib_sample/hla_table.txt",
RNAseq_file = "./../lib_sample/RNAseq.txt",
RNA_bam="./../lib_sample/RNAbam.bam",
CNV="./../lib_sample/Copy.txt",
Purity = 0.719526227140365,
refDNA = "./../lib_int/GRCh37.fa",
Depth_Normal_Column = 53, Depth_Tumor_Column = 51)
MainMergeClass1(hmdir = getwd(),
input_dir = "./../lib_sample",
input_file_prefix = "sample_genomon",
Tumor_RNA_BASED_ON_DNA = TRUE)
MainINDELClass2(hmdir = getwd(),
input_file = "./../lib_sample/sample_genomon.txt",
job_ID = "NO_JOB_ID",
file_name_in_HLA_table = "096b4f32-10c1-4737-a0dd-cae04c54ee33",
HLA_file = "./../lib_sample/hla_table2.txt",
RNAseq_file = "./../lib_sample/RNAseq.txt",
RNA_bam="./../lib_sample/RNAbam.bam",
CNV="./../lib_sample/Copy.txt",
Purity = 0.719526227140365,
refDNA = "./../lib_int/GRCh37.fa",
Depth_Normal_Column = 53, Depth_Tumor_Column = 51)
MainMergeClass2(hmdir = getwd(),
input_dir = "./../lib_sample",
input_file_prefix = "sample_genomon",
Tumor_RNA_BASED_ON_DNA = TRUE)
#Framingham<-c("調査日の年齢","総コレステロール","ＨＤＬコレステロール","収縮期血圧")
#Framingham_binary<-c("喫煙習慣","喫煙状況","糖尿病薬")
CVD_M<-function(A, TC, HDL, risk){
val<-3.06117 * (log(A[,grep("年齢", colnames(A))])
- mean(sort(log(A[,grep("年齢", colnames(A))]))))
+ 1.12370 * (log(TC) - mean(log(TC[!is.na(TC)])))
- 0.93263 * (log(HDL) - mean(log(HDL[!is.na(HDL)])))
+ 1.99881 * (log(A[,grep("収縮期血圧", colnames(A))])
- mean(log(A[!is.na(A[,grep("収縮期血圧", colnames(A))]),grep("収縮期血圧", colnames(A))])))
+ 0.65451 * ifelse(A[,grep("喫煙習慣", colnames(A))] > 1, 1, 0)
+ 0.57367 * as.numeric(A[,grep("糖尿病患者", colnames(A))])
if(risk) {return(1 - 0.88936^exp(val))
}else {return(val)}
}
CVD_F<-function(A, TC, HDL, risk){
val<-2.32888 * (log(A[,grep("年齢", colnames(A))])
- mean(sort(log(A[,grep("年齢", colnames(A))]))))
+ 1.20904 * (log(TC) - mean(log(TC[!is.na(TC)])))
- 0.70833 * (log(HDL) - mean(log(HDL[!is.na(HDL)])))
+ 2.76157 * (log(A[,grep("収縮期血圧", colnames(A))])
- mean(log(A[!is.na(A[,grep("収縮期血圧", colnames(A))]),grep("収縮期血圧", colnames(A))])))
+ 0.52873 * ifelse(A[,grep("喫煙習慣", colnames(A))] > 1, 1, 0)
+ 0.69154 * as.numeric(A[,grep("糖尿病患者", colnames(A))])
if(risk) {return(1 - 0.95012^exp(val))
}else{return(val)}
}
CVD<-function(A, BASE, COEF_Dis, COEFLOG_Con, MEAN, lb){
if(length(COEF_Dis)>0){
a<-sapply(1:length(COEF_Dis),
function(x) COEF_Dis[x] * A[,grep(names(COEF_Dis)[x], colnames(A))[1]])
} else {
a<-matrix(nrow=nrow(A), ncol=1, 0)
}
if(length(COEFLOG_Con)>0){
b<-sapply(1:length(COEFLOG_Con),
function(x) COEFLOG_Con[x] *
(log(A[,match(names(COEFLOG_Con)[x], colnames(A))] + lb) -
MEAN[match(names(COEFLOG_Con)[x], colnames(A))]))
} else {
b<-matrix(nrow=nrow(A), ncol=1, 0)
}
return (1 - (1 - BASE[nrow(BASE),1])^sapply(1:nrow(b), function(x) exp(sum(c(a[x,],b[x,])))))
}
#Processing Data
Attach.CVDCrr<-function(data_rm){
existing<-sort(sapply(c(Base, Flag, Predictor), function(x) grep(x,colnames(data_rm))[1]))
data_rm_pred<-data_rm[,existing]
colnames(data_rm_pred)<-names(existing)
#data_rm_pred_enough<-data_rm_pred[,apply(data_rm_pred, 2,
#                                 function(x) length(which(!is.na(as.numeric(x))))) > 6500]
#data_rm_pred_enough<-data_rm_pred_enough[apply(data_rm_pred_enough, 1, function(x) !is.na(sum(as.numeric(x)))),]
data_rm_pred<-data_rm_pred[data_rm_pred[,grep("年齢",colnames(data_rm_pred))]!="",]
data_rm_pred_num<-t(apply(data_rm_pred, 1, function(x) as.numeric(x)))
colnames(data_rm_pred_num)<-colnames(data_rm_pred)
data_rm_pred_num[,1]<-as.numeric(apply(data_rm_pred_num[,c(2,3)],1,function(x) paste(x,collapse = "")))
#Male/Female Data
data_rm_pred_num_M<-data_rm_pred_num[data_rm_pred_num[,
grep("性別",colnames(data_rm_pred_num))]=="1",]
data_rm_pred_num_F<-data_rm_pred_num[data_rm_pred_num[,
grep("性別",colnames(data_rm_pred_num))]=="2",]
#Cockcroft-Gault
data_rm_pred_num_M <- cbind(data_rm_pred_num_M,
{(140-data_rm_pred_num_M[,grep("年齢",colnames(data_rm_pred_num_M))]) *
data_rm_pred_num_M[,grep("体重",colnames(data_rm_pred_num_M))]}/
{72 * data_rm_pred_num_M[,grep("クレアチニン", colnames(data_rm_pred_num_M))]})
data_rm_pred_num_F <- cbind(data_rm_pred_num_F,
0.85 * {(140-data_rm_pred_num_F[,grep("年齢",colnames(data_rm_pred_num_F))]) *
data_rm_pred_num_F[,grep("体重",colnames(data_rm_pred_num_F))]} /
{72 * data_rm_pred_num_F[,grep("クレアチニン", colnames(data_rm_pred_num_F))]})
colnames(data_rm_pred_num_M)[ncol(data_rm_pred_num_M)]<-"Ccr"
colnames(data_rm_pred_num_F)[ncol(data_rm_pred_num_F)]<-"Ccr"
#CVD Risk Score
data_rm_pred_num_M <- cbind(data_rm_pred_num_M,
CVD_M(data_rm_pred_num_M,
data_rm_pred_num_M[,grep("総コレステロール", colnames(data_rm_pred_num_M))],
data_rm_pred_num_M[,grep("ＨＤＬコレステロール", colnames(data_rm_pred_num_M))],TRUE))
data_rm_pred_num_F <- cbind(data_rm_pred_num_F,
CVD_F(data_rm_pred_num_F,
data_rm_pred_num_F[,grep("総コレステロール", colnames(data_rm_pred_num_F))],
data_rm_pred_num_F[,grep("ＨＤＬコレステロール", colnames(data_rm_pred_num_F))],TRUE))
colnames(data_rm_pred_num_M)[ncol(data_rm_pred_num_M)]<-"F_CVDRisk"
colnames(data_rm_pred_num_F)[ncol(data_rm_pred_num_F)]<-"F_CVDRisk"
#CVD Risk Score
data_rm_pred_num_M <- cbind(data_rm_pred_num_M,
CVD_M(data_rm_pred_num_M,
data_rm_pred_num_M[,grep("総コレステロール", colnames(data_rm_pred_num_M))],
data_rm_pred_num_M[,grep("ＨＤＬコレステロール", colnames(data_rm_pred_num_M))],FALSE))
data_rm_pred_num_F <- cbind(data_rm_pred_num_F,
CVD_F(data_rm_pred_num_F,
data_rm_pred_num_F[,grep("総コレステロール", colnames(data_rm_pred_num_F))],
data_rm_pred_num_F[,grep("ＨＤＬコレステロール", colnames(data_rm_pred_num_F))],FALSE))
colnames(data_rm_pred_num_M)[ncol(data_rm_pred_num_M)]<-"F_Con_CVDRisk"
colnames(data_rm_pred_num_F)[ncol(data_rm_pred_num_F)]<-"F_Con_CVDRisk"
return(list(data_rm_pred_num_M,data_rm_pred_num_F))
}
source("Initialize.R")
source("ReadCVDFile.R")
source("Set.Variables.R")
Predictor<-c(NoCost,NoCost_Binary,NoCost_HighFixed,HighCost)
source("DrawHistograms.AllValues.R")
#Remove Data Column of which #NA is too Large
hdl_th<-grep("ＨＤＬコレステロール",colnames(data))
remove<-which(apply(data, 2, function(x) length(which(!is.na(x) & x!=""))) <
length(which(!is.na(data[,hdl_th]) & data[,hdl_th] != "",hdl_th)))
data_rm<-data[,-remove]
#Remove Patients less than 30
age<-as.numeric(data_rm[,match("調査日の年齢（生年月日より計算）",colnames(data_rm))])
data_rm<-data_rm[age >= 30 & !is.na(age),]
#Remove "状況" instead of "習慣"
#data_rm[,grep("喫煙習慣",colnames(data_rm))]<-data_rm[,grep("喫煙状況",colnames(data_rm))]
#data_rm<-data_rm[,-grep("状況",colnames(data_rm))]
#Attach CVD and Crr Indicators
source("Attach.CVDCrr.R")
data_list<-Attach.CVDCrr(data_rm)
#Modify Strange Values
source("Modify.InfeasibleValues.R")
data_list<-Modify.Err(data_list)
source("MakeTimeSeriesMatrix.R")
source("MakeSurvivalData.R")
source("SuvAnalysis.R")
#CVD Risk
if(FALSE){
j<-match(Flag[2], colnames(data_list[[1]]))
TSD_list<-MakeTimeSeriesMatrix(j, data_list)
SuvD_M<-MakeSurvivalData(TSD_list[[1]], data_list[[1]], ylater = 3)
SuvD_F<-MakeSurvivalData(TSD_list[[2]], data_list[[2]], ylater = 3)
Selected_Parameters<-SuvAnalysis(pdf_name = paste("./../pdf/CVDIndicator.Existing.Male.",colnames(data_list[[1]])[j],".pdf",sep=""),
SuvD = SuvD_M, target = colnames(data_list[[1]])[j], TSD = TSD_list[[1]],
data_sex = data_list[[1]], ylater = 3, Candidates = Candidates_CVD, Sex = "Male")
write.table(Selected_Parameters,paste("./../Results/Selected_Parameters.Existing.Male.",colnames(data_list[[1]])[j],".txt",sep=""),
row.names=FALSE, col.names=FALSE, quote=FALSE, sep="\t")
Selected_Parameters<-SuvAnalysis(pdf_name = paste("./../pdf/CVDIndicator.Existing.Female.",colnames(data_list[[2]])[j],".pdf",sep=""),
SuvD = SuvD_F, target = colnames(data_list[[2]])[j], TSD = TSD_list[[2]],
data_sex = data_list[[2]], ylater = 3, Candidates = Candidates_CVD, Sex = "Female")
write.table(Selected_Parameters,paste("./../Results/Selected_Parameters.Existing.Female.",colnames(data_list[[1]])[j],".txt",sep=""),
row.names=FALSE, col.names=FALSE, quote=FALSE, sep="\t")
}
#Others
ylater <- 3
for(j in sapply(Flag[c(3,4,5,6)], function(x) grep(x,colnames(data_list[[1]])))){
TSD_list<-MakeTimeSeriesMatrix(j, data_list)
SuvD_M<-MakeSurvivalData(TSD_list[[1]], data_list[[1]], ylater = ylater)
SuvD_F<-MakeSurvivalData(TSD_list[[2]], data_list[[2]], ylater = ylater)
Selected_Parameters<-SuvAnalysis_GLASSO(pdf_name = paste("./../pdf/CVDIndicator.Male.",
colnames(data_list[[1]])[j],".pdf",sep=""),
SuvD = SuvD_M,
target = colnames(data_list[[1]])[j],
TSD = TSD_list[[1]],
data_sex = data_list[[1]],
ylater = ylater,
Sex = "Male")
write.table(Selected_Parameters,paste("./../Results/Selected_Parameters.Male.",
colnames(data_list[[1]])[j],".txt",sep=""),
row.names=FALSE, col.names=FALSE, quote=FALSE, sep="\t")
Selected_Parameters<-SuvAnalysis_StepAIC(pdf_name = paste("./../pdf/CVDIndicator.Female.",
colnames(data_list[[1]])[j],".pdf",sep=""),
SuvD = SuvD_F,
target = colnames(data_list[[2]])[j],
TSD = TSD_list[[2]],
data_sex = data_list[[2]],
ylater = ylater, "Female")
write.table(Selected_Parameters,paste("./../Results/Selected_Parameters.Female.",colnames(data_list[[1]])[j],".txt",sep=""),
row.names=FALSE, col.names=FALSE, quote=FALSE, sep="\t")
}
?read.table
data<-scan("./../Result/DiagnosisFormat.Merged.txt", "character", sep="\n", skip = 1)
data<-gsub("\"", "", data)
data<-t(sapply(data, function(x) strsplit(x,"\t")[[1]][1:91]))
colnames(data)<-scan("./../Result/DiagnosisFormat.Merged.txt", "character", sep="\t", nlines = 1)[1:91]
rownames(data)<-NULL
data<-scan("./../Result/DiagnosisFormat.Merged.txt", "character", sep="\n", skip = 1)
20 / (21)^2 / 22
20 / ((21)^2 * 22)
10 / ((11)^2 * 12)
100 / ((20)^2 * 21)
12 * 12
12 * 12 * 2
44 * 12
44 * 12 + 600
60 + 24 * 9 + 60 * 2 + 20 * 9
(60 + 24 * 9 + 60 * 2 + 20 * 9 + 30 *9)
(60 + 24 * 9 + 60 * 2 + 20 * 9 + 30 *9) - 40 * 9
((60 + 24 * 9 + 60 * 2 + 20 * 9 + 30 *9) - 40 * 9) - 200
900 * 0.25
((60 + 24 * 9 + 60 * 2 + 20 * 9 + 30 *9) - 40 * 9) - 200 - 225
24*12
28 * 1.2
28 * 1.1
25 * 12
25 * 12 * 5 * 1.3
25 * 12 * 5 * 1
14.0473903 * 2220845.22
14.0473903 * 2220845.22 - 22,366561
14.0473903 * 2220845.22 - 2236.6561
14.0473903 * 2220845.22 - 22366561
14.0473903 * 2219852.75
source("Initialize.R")
source("ReadCVDFile.R")
source("Set.Variables.R")
source("DrawHistograms.AllValues.R")
set.seed(100)
#Save Data
data_rm<-data
#Remove Patient Using Medicine
Med_indicator<-apply(data_rm[,sapply(Medicine,
function(x) grep(x,colnames(data_rm)))], 1,
function(x) sum(sort(as.numeric(x))))
data_rm<-data_rm[Med_indicator==0,]
#Attach CVD and Crr Indicators
source("Attach.CVDCrr.R")
data_list<-Attach.CVDCrr(data_rm)
#Modify Strange Values
source("Modify.InfeasibleValues.R")
data_list<-Modify.Err(data_list)
#TableTransformation
data_sum<-rbind(data_list[[1]], data_list[[2]])
tTable<-cbind(rownames(data_sum), data_sum[,1])
rownames(data_list[[1]])<-data_list[[1]][,1]
rownames(data_list[[2]])<-data_list[[2]][,1]
#Generate Data of which Outliers are Transformed to 0/1
source("Label.Outlier.R")
th<-1.0*10^-3
data_list_bin<-Outlier.Binary(data_list, th)
#Remove Outliers
data_list<-Remove.Out(data_list, th)
data_list[[1]]<-data_list[[1]][data_list[[1]][,grep("Outlier",colnames(data_list[[1]]))]!=1,]
data_list[[2]]<-data_list[[2]][data_list[[2]][,grep("Outlier",colnames(data_list[[2]]))]!=1,]
rownames(data_list[[1]])<-tTable[match(rownames(data_list[[1]]), tTable[,2]),1]
rownames(data_list[[2]])<-tTable[match(rownames(data_list[[2]]), tTable[,2]),1]
#Out
source("cv.glmnet.select.R")
source("OutputPredictiveValues.R")
(7497 + 12756 + 228960) / 2
(967+967+967+967+5184+1934+5184+1934+45112+1934+4536+8797+1934+4536+8532+2700+1934+5358+10700+3500+11668)
(967+967+967+967+5184+1934+5184+1934+4512+1934+4536+8797+1934+4536+8532+2700+1934+5358+10700+3500+11668)
6415+6482+400+8532+19800+8478
setwd("~/Git/Neoantimon/main")
